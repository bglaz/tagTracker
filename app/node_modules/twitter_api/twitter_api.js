// Dependencies
var http = require('http');
var oauth_nonce = require('oauth_nonce');
var crypto = require('crypto');



var Twitter = function() {
 	this.keys = require('./config.js');
};

Twitter.prototype = {
	testFn: 	function() {
		generateOAuthHeader(this.keys);
	}
};

//Utility functions

var generateOAuthHeader = function(keys,method,url,params) {

	var method = method || "POST";
	var url = url || "https://stream.twitter.com/1.1/statuses/filter.json";
	var params = params || {track: 'cows'};

	//following documentation detailed here: https://dev.twitter.com/docs/auth/creating-signature

	var header_params = {
		oauth_consumer_key: 		keys.consumer_key,
		oauth_nonce: 				oauth_nonce(),
		oauth_signature_method: 	"HMAC-SHA1",
		oauth_timestamp: 			Math.floor((+ new Date())/1000),
		oauth_token: 				keys.token,
		oauth_version: 				"1.0"
	};

	/*
		keep list of params that are actually used in auth header
		(these are augmented and also used in signature generation)
	*/
	var authHeaderParams = Array('oauth_consumer_key','oauth_nonce','oauth_signature','oauth_signature_method','oauth_timestamp','oauth_token','oauth_version');


	//add in user's params
	if(params && typeof params == "object") {
		for(var i in params) {
			header_params[i] = params[i];
		}
	}

	//encode values
	for(var i in header_params) {
		header_params[i] = encodeURIComponent(header_params[i]); 
	}

	//sort by alpha
	var sortedKeys = sortObjectKeys(header_params);

	//create param string
	var paramString = '';

	for(var i = 0, len = sortedKeys.length; i < len; i++) {
		paramString += sortedKeys[i] + '=' + header_params[sortedKeys[i]];
		if(i != len-1) {
			paramString += '&';
		}
	};
	//console.log(paramString);

	//create signature base string
	var sigBaseString = method.toUpperCase() + '&' + encodeURIComponent(url) + '&' + encodeURIComponent(paramString);
	//console.log(sigBaseString);

	//create signing key
	var signingKey = encodeURIComponent(keys.consumer_secret) + '&' + encodeURIComponent(keys.token_secret);
	var signature = crypto.createHmac('sha1',signingKey).update(sigBaseString).digest('base64');
	header_params.oauth_signature = signature;

	//Build the final Authorization header!
	var result = "OAuth ";
	for(var i = 0, len = authHeaderParams.length; i < len; i++) {
		result += encodeURIComponent(authHeaderParams[i]) + '="' + encodeURIComponent(header_params[authHeaderParams[i]]) + '"';
		if(i != len-1) {
			result += ', ';
		}
	}
	console.log(result);
}

var sortObjectKeys = function(obj) {
	var results = [];
	for(var key in obj) {
		results.push(key);
	}
	return results.sort();
}

//export module
module.exports = exports =  new Twitter();